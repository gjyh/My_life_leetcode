输入: [1,2,3,4]
输出: [24,12,8,6]
说明: 请不要使用除法，且在?O(n) 时间复杂度内完成此题。

进阶：
你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）


方法一：左右乘积列表 O(N) O(N)
索引处左侧的所有数字乘积和右侧所有数字的乘积相乘得到答案。
算法：


初始化两个空数组 L 和 R。对于给定索引 i，L[i] 代表的是 i 左侧所有数字的乘积，R[i] 代表的是 i 右侧所有数字的乘积。

我们需要用两个循环来填充 L 和 R 数组的值。对于数组 L，L[0] 应该是 1，因为第一个元素的左边没有元素。对于其他元素：L[i]=L[i-1]*nums[i-1]。

同理，对于数组 R，R[length-1] 应为 1。length 指的是输入数组的大小。其他元素：R[i]=R[i+1]*nums[i+1]。

方法二：空间复杂度 O(1) 的方法
初始化 answer 数组，对于给定索引 i，answer[i] 代表的是 i 左侧所有数字的乘积。
构造方式与之前相同，只是我们视图节省空间。
这种方法的唯一变化就是我们没有构造 R 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组 answer[i]=answer[i]*R  。然后 R 更新为 R=R*nums[i]

class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        inum=len(nums)
        L=[1 for i in range(0,inum)]
        R=1
        for i in range(1,inum):
            L[i]=L[i-1]*nums[i-1]
        for i in range(inum-1,0,-1):
            L[i]=R*L[i]
            R=R * nums[i]
        L[0]=R 
        return L

执行用时 :28 ms, 在所有 Python 提交中击败了100.00%的用户