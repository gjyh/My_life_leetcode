审题要充分利用二叉搜索树的特性

我的代码：更像是针对树写的
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        def ancester(p,q): #判断p是否是q的祖先
            if p==q:
                return True
            if p.left!=None and p.val>q.val:
                return ancester(p.left,q)
            if p.right!=None and p.val<q.val:
                return ancester(p.right,q)
            return False
            
        node=root
        while root!=None:
            if p.val==root.val:
                return root
            elif p.val>root.val:
                root=root.right
            else:
                root=root.left
            if not ancester(root,q):
                return node
            else:
                node=root
        return node
简化：
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        if p.val>root.val and q.val>root.val:
            return self.lowestCommonAncestor(root.right,p,q)
        if p.val<root.val and q.val<root.val:
            return self.lowestCommonAncestor(root.left,p,q) 
        return root