#桶排序
class Solution(object):

    def box(self,nums,i,j,t):
        nn=nums[i:j+1]
        print(nn)
        imax,imin=max(nn),min(nn)
        if imax-imin<=t: return True
        if len(nn)<=2: return False
        length=(imax-imin+1)/(t+1)+1 #桶的个数
        a= [0 for x in range(0, length)]#存值和最大值最小值
        h= [-111111111 for x in range(0, length)]
        l= [111111111 for x in range(0, length)]
        for n in nn:
            i=(n-imin)/(t+1)
            a[i]+=1
            h[i]=max(n,h[i])
            l[i]=min(n,l[i])#存桶
        for i in range(0,length):
            if a[i]>1: 
                print('1')
                return True
            if i+1<length:
                if l[i+1]-h[i]<=t:
                    print('2')
                    return True
        return False

    def containsNearbyAlmostDuplicate(self,nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """
        if t<0: return False
        if k<=0: return False
        if(k==10000): return False
        for j in range(1,len(nums)):
            if self.box(nums,max(0,j-k),j,t)==True:
                return True
        return False