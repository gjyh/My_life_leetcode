这一题准备用优先级队列来做。

python优先级队列可以通过两个不同的模块Queue.PriorityQueue模块和heapq模块来实现。这里将介绍两种对应的解法。

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

------------1--------------

from Queue import PriorityQueue

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        p=PriorityQueue() #优先级队列实例化
        rf = rl = ListNode(-1) #返回链表初始化
        for l in lists:
            if l:
                p.put((l.val,l))
        
        while not p.empty():
            x,node=p.get()
            rf.next=node
            rf = rf.next
            node=node.next
            if node:
                p.put((node.val,node))
        
        return rl.next

-----------------2---------------
import heapq
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        p=[]
        rf = rl = ListNode(-1) #返回链表初始化
        for l in lists:
            if l:
                heapq.heappush(p,(l.val,l))
        
        while p:
            x,node=heapq.heappop(p)
            rf.next=node
            rf = rf.next
            node=node.next
            if node:
                heapq.heappush(p,(node.val,node))
        
        return rl.next

# 总结：
 虽然调用模块的代码几乎一致，但使用heapq（堆实现）比Queue运行时间缩短近一半。这可能是因为Queue的底层实现是用的位置列表或排序列表，插入和移除是O（n）而非 O（logn）。

# 补充Queue.PriorityQueue模块和heapq模块的常用方法介绍

# heapq模块：
heapq.heappush(heap, item) #把item添加到heap中（heap是一个列表）



heapq.heappop(heap) #把堆顶元素弹出，返回的就是堆顶



heapq.heappushpop(heap, item) #先把item加入到堆中，然后再pop



heapq.heapreplace(heap, item) #先pop，然后再把item加入到堆中



heapq.heapify(x) #将列表x进行堆调整，默认的是小顶堆



heapq.merge(*iterables) #将多个列表合并，并进行堆调整，返回的是合并后的列表的迭代器



heapq.nlargest(n, iterable, key=None) #返回最大的n个元素（Top-K问题）



heapq.nsmallest(n, iterable, key=None) #返回最小的n个元素（Top-K问题）

# 使用 heapq 构建 Priority Queue:
1. 将元素（数字类型）item自身作为键值（优先级）

2. 每个元素变成（priority, item)元组,item可以是任意类型，而不仅是数字。

# PriorityQueue 模块：
p=PriorityQueue()
常用p.put（(priority，item)）与p.get（）返回元组
入队列的是一个元组，不要忘记括号，默认情况下队列根据元组的第一个元素进行排序。越小的优先级越低。
p.empty()返回boolean
